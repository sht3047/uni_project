- 과제 내용
  - 회원 관리 및 회원 인증 기능 구현
    - 일반 회원과 관리자의 등급을 분류
  - 게시판 기능 구현
    - 게시판 글 목록 보기, 작성/수정/삭제/검색 기능
	  - 검색은 글 제목, 내용, 작성자를 이용하여 검색
  - 게시판 기능은 로그인 후 이용 가능
  - 게시글의 삭제 및 수정은 글 작성자와 관리자만 수행 가능


- 설계

  - 필요한 페이지
    - 로그인 화면
	- 회원가입 화면
	- 게시글 목록과 검색을 수행하는 화면
	- 게시글을 조회 할 수 있는 화면
	  - 작성자와 관리자의 경우 수정과 삭제 추가
	- 게시글의 작성 또는 수정을 위한 화면
	
	- 회원 정보를 나타내는 화면
	  - 관리자의 회원 관리를 위한 화면
	
	
  - 각 페이지 별 기능
    - 로그인
	  - 사용자의 ID와 password를 입력받아야 한다.
	  - 사용자가 입력한 정보에 취합하는 계정 정보가 있는지 확인하고 다음 페이지인 게시글 목록으로 이동한다.
	  - 계정 정보가 없다면 입력 정보가 맞는지 확인 또는 회원가입을 권유한다.
	
	- 회원가입
	  - 사용자의 ID, password를 입력받아 계정을 생성한다.
	    - 이미 있는 ID인지 검사하고 있다면 다른 ID를 사용하도록 권유한다.
      - 추가 정보가 있다면 입력하도록 한다(메일, 생일 등의 정보)
	  - 계정 정보를 모두 입력받았다면 사용자 이름의 파일을 만들어 저장한다.
	  
	- 게시글 목록 및 검색
	  - 현재 작성된 게시글을 나타낸다.
	    - 게시글의 수가 많다면 한번에 나타낼 게시글은 최대 몇개까지인지 설정할 수 있게한다.
	  - 하단에 검색을 위한 공간을 만들어 검색할 키워드와 어떤 타입으로 검색할지 고른다(글 제목, 내용, 작성자)
	  
    - 게시글 작성
      - 사용자는 제목과 본문 내용을 작성할 수 있다.
      - 작성자는 자동으로 등록되도록 하며 ID로 저장된다.
	  - 작성된 게시글은 파일로 저장된다.
	    - 파일은 1000번부터 시작하는 번호의 이름으로 저장되며 게시글이 1개 작성될 때 마다 1씩 늘어나며 이 번호는 게시글이 삭제되어도 줄어들지 않는다.
		- 파일 내부에 입력된 정보는 글의 제목, 글의 작성자, 글의 본문 내용 순으로 저장된다.
		- 파일 내부요소를 구분하기 위한 구분 문자 또는 서식을 정한다.
		  
		  - ex) 1 특정 문자열을 이용하여 문자열을 분리
			- String[] str = {title, writer, content};
			- split(str[i]+"::");
		    - title:: <내용>
			- writer:: <내용>
			- content:: <내용>
		  
		  - ex) 2 특정 서식을 이용하여 저장(yaml)
		    title: hello world
			writer: player
			content: Hello World!
			
	  - 게시글 목록의 글들은 디렉토리 내의 게시글 저장 파일을 읽어 페이지에 표시한다.
	  
	- 게시글 조회
	  - 조회시 상단에 글의 제목과 작성자를, 중앙에 본문 내용일 나타낸다.
	  - 조회하는 이용자가 작성자 또는 관리자라면 본문 하단에 수정과 삭제 버튼을 추가한다.
	
	- 게시글 삭제
	  - 삭제를 누르면 해당 게시글의 번호를 받고 목록으로 이동하며 게시글은 받은 번호를 찾아 디렉토리에서 제거한다.
    
	- 게시글 수정
	  - 수정 화면은 작성과 동일하며 파일을 읽어들여 내용을 기입한다.
	  - 저장을 하면 동일한 번호의 파일에 작성한 내용을 덮어쓴다.
	  
	- 회원 정보 조회
	  - 회원 정보는 비밀번호를 제외한 회원가입을 했을 때 입력된 정보들을 나타낸다.
	  - 계정이 생성된 일시를 표시한다.
	  - 해당 계정에서 작성된 게시글들을 표시한다.
	  - 관리자의 겅우
	    - 회원 목록을 나타내는 페이지를 따로 추가하고 회원 이름을 선택하면 해당 정보 페이지로 이동한다.
		
		
  - 그 외
    - DB를 설계한다면?
	  - 계정 정보 테이블
	    - 계정 등록 번호
		- ID
		- password 
		- 생성 일시
		- 계정 등급 (user, admin)
		- etc
		
	  - 게시물 목록 테이블
	    - 게시물 번호
		- 작성자 = ID
		- 작성 날짜
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	